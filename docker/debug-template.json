{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "ARO Application Stack - Staging",

  "Metadata" : {

    "RelevantDates" : {
        "Created" : "2015-05-05",
        "LastEdited" : "2016-02-02"
    },
    "TemplateNotes" : {
        "MethodVersion" : "4",
        "MethodDescription": "Shared template for VPC assets, universal template for all stacks within a given environment (staging/production)"
    },
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "Naming and Tagging Parameters" },
          "Parameters" : [ "ClientSlug", "ProjectTag", "EnvSlug", "AroClient" ]
        },
        {
          "Label" : { "default" : "Database Parameters" },
          "Parameters" : [ "DBName", "DBUsername", "DBPassword", "DBInstanceType", "SnapshotId", "DBVolumeSize" ]
        },
        {
          "Label" : { "default" : "Repository Parameters" },
          "Parameters" : [ "ConfigRepoBranch", "AppRepoBranch", "GithubSshKey" ]
        },
        {
          "Label" : { "default" : "Misc / Static" },
          "Parameters" : [ "SharedStackName", "LambdaFunctionName", "SSLCertificateId", "PrimaryAvailabilityZone", "SslCertificate", "VpcId", "SshKeyName" ]
        },
        {
          "Label" : { "default" : "PGR DB Host Parameters" },
          "Parameters" : [ "PgrFlag", "PgrDbImageId", "PgrDbInstanceType" ]
        },
        {
          "Label" : { "default" : "Deprecated" },
          "Parameters" : [ "DBImageId", "DBInstanceKeyName", "EnvNameTagPart", "DbNameTagPart", "DBURI", "BaseURI" ]
        }
      ]
    }

  },

  "Parameters" : {

    "VpcId" : {
      "Type" : "AWS::EC2::VPC::Id",
      "Default" : "vpc-79412d1c"
    },
    "DBName": {  
      "Type":"String",
      "Description":"Leave blank if restoring from snapshot",
      "Default":"aro"
    },
    "DBUsername": {  
      "Default":"aro",
      "Description":"The database admin account username",
      "Type":"String"
    },
    "DBPassword":{  
      "Default":"joeMILLER83",
      "NoEcho":"true",
      "Description":"The database admin account password. Must not be blank",
      "Type":"String",
      "MinLength":"8",
      "MaxLength":"41",
      "ConstraintDescription":"Minimum of 8 characters. Must match previous password if restoring"
    },
    "ClientSlug" : {
      "Type" : "String",
      "Default" : "internal"
    },
    "LambdaFunctionName" : {
      "Type" : "String",
      "Default" : "LookupStackOutputs"
    },
    "SharedStackName" : {
      "Type" : "String",
      "Description" : "Name of the stack with shared public VPC/network assets",
      "Default" : "S-ARO-SHARED-01"
    },
    "PrimaryAvailabilityZone" : {
      "Type" : "AWS::EC2::AvailabilityZone::Name",
      "Description" : "Primary availability zone for App and DB servers",
      "Default" : "us-east-1d"
    },
    "EnvSlug" : {
      "Type" : "String",
      "Description" : "All caps, used in resource names and tags - usually just the all-caps version of ClientSlug",
      "Default" : "INTERNAL"
    },
    "ProjectTag" : {
      "Type" : "String",
      "Description" : "Project or billing code used to tag resources created by this template",
      "Default" : "AIT:ARO"
    },
    "DBInstanceType" : {
      "Type" : "String",
      "Description" : "Image type for the PostGIS/PGRouting database instance",
      "Default" : "db.m4.xlarge"
    },
    "DBVolumeSize" : {
      "Type" : "String",
      "Description" : "size of extra db volume",
      "Default" : "50"
    },
    "SshKeyName" : {
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "Description" : "KeyPair to use",
      "Default" : "nvitucci-ec2"
    },
    "SslCertificate": {
      "Type": "String",
      "Description": "ARN of SSL certificate to attach to the load balancer",
      "Default": "arn:aws:acm:us-east-1:976168524097:certificate/ef51a231-d186-4ab2-9c13-94934d3bfdcd"
    },
    "ConfigRepoBranch" : {
      "Type" : "String",
      "Default" : "master"
    },
    "AppRepoBranch" : {
      "Type" : "String",
      "Default" : "develop"
    },
    "AroClient" : {
      "Type" : "String",
      "Default" : "aro",
      "Description" : "Passes through as ARO_CLIENT env key to determine which configuration to run in the application"
    },
    "PgrDbInstanceType" : {
      "Type" : "String",
      "Default" : "m4.xlarge"
    },
    "PgrDbImageId" : {
      "Type" : "String",
      "Default" : "ami-e9802a82",
      "Description" : "AMI ID for PG_Routing enabled database"
    },
    "PgrFlag" : {
      "Type" : "String",
      "AllowedValues" : [ "yes", "no" ],
      "Default" : "no",
      "Description" : "Use PG_Routing enabled database?"
    },
    "RdsFlag" : {
      "Type" : "String",
      "AllowedValues" : [ "yes", "no" ],
      "Default" : "no",
      "Description" : "Use RDS database?"
    },
    "GithubSshKey" : {
      "Type" : "String",
      "Description" : "SshKey for App and Config repository access"
    }

  },

  "Mappings" : {
    "DNSZoneMap":{  
      "Staging":{  
        "Name":"staging.app.altvil.com",
        "Private":"ZJT9CNWJO53SL",
        "Public":"Z2F2HKV7MN76BU"
      },
      "Production":{  
        "Name":"app.altvil.com",
        "Private":"Z15UG0P7J1ZPRI",
        "Public":"Z176YKVMMSEP8V"
      },
      "VpnConnected":{  
        "Name":"cloud.altvil.com",
        "Private":"Z253PXZ4U8TQCU",
        "Public":"ZQ2MYMRZNH65F"
      },
      "Core":{  
        "Name":"altvil.com",
        "Private":"",
        "Public":"ZKSXYJ4GFBRD1"
      }
    },
    "EnvironmentMap":{  
      "Staging":{  
        "GatewayId":"igw-6b98240e",
        "VpcId":"vpc-79412d1c",
        "VpnGateway":"",
        "CidrBlock":"10.103.0.0/16"
      },
      "Production":{  
        "GatewayId":"igw-0a72c26f",
        "VpcId":"vpc-62c4a407",
        "VpnGateway":"",
        "CidrBlock":"10.102.0.0/16"
      },
      "VpnConnected":{  
        "GatewayId":"igw-aa9088c8",
        "VpcId":"vpc-f3a14f96",
        "VpnGateway":"vgw-0dfa1b64",
        "NATInstanceId":"i-c2ab1fe1",
        "CidrBlock":"10.100.0.0/16"
      }
    },
    "PeeringConnectionMap":{  
      "Staging":{  
        "ToVpnConnected":"pcx-8df423e4",
        "ToProduction":"pcx087ae52ee"
      },
      "VpnConnected":{  
        "ToStaging":"pcx-8df423e4"
      }
    }
  },

  "Conditions" : {
    "PgrEnabled" : {
      "Fn::Equals" : [ {"Ref" : "PgrFlag" }, "yes" ]
    },
    "PgrDisabled" : {
      "Fn::Equals" : [ {"Ref" : "PgrFlag" }, "no" ]
    },
    "Debugging" : {
      "Fn::Equals" : [ { "Ref" : "PgrFlag" }, "purple" ]
    },
    "RdsEnabled" : {
      "Fn::Equals" : [ { "Ref" : "RdsFlag" }, "yes" ]
    }

  },

  "Resources" : {

    "SharedNetworkInfo": {
      "Type": "Custom::NetworkInfo",
      "Properties": {
        "ServiceToken": { "Fn::Join": [ "", [ "arn:aws:lambda:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":function:", {"Ref" : "LambdaFunctionName"} ] ] },
        "StackName": {
            "Ref": "SharedStackName"
        }
      }
    },
  

    "AppSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : { "Fn::Join" : [ "", [ "S-ARO-", { "Ref" : "EnvSlug" } , " Application Servers" ] ] },
        "VpcId" : { "Ref" : "VpcId" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "", [ "S-ARO-", { "Ref" : "EnvSlug" } ] ] } },
          { "Key" : "Project" , "Value" : { "Ref" : "ProjectTag" } }
        ],
        "SecurityGroupIngress" : [
          {
            "CidrIp" : "0.0.0.0/0",
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22"
          }
        ]
      }
    },

    "AppSecurityGroupSelfIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "DependsOn" : "AppSecurityGroup",
      "Properties" : {
        "GroupId" : { "Ref" : "AppSecurityGroup" },
        "IpProtocol" : "-1",
        "FromPort" : "-1",
        "ToPort" : "-1",
        "SourceSecurityGroupId" : { "Ref" : "AppSecurityGroup" }
      }
    },

    "AppSecurityGroupELBIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "DependsOn" : "AppSecurityGroup",
      "Properties" : {
        "GroupId" : { "Ref" : "AppSecurityGroup" },
        "IpProtocol" : "tcp",
        "FromPort" : "80",
        "ToPort" : "80",
        "SourceSecurityGroupId" : { "Ref" : "LoadBalancerSecurityGroup"  }
      }
    },

    "AppSecurityGroupELBRedirectIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "DependsOn" : "AppSecurityGroup",
      "Properties" : {
        "GroupId" : { "Ref" : "AppSecurityGroup" },
        "IpProtocol" : "tcp",
        "FromPort" : "8081",
        "ToPort" : "8081",
        "SourceSecurityGroupId" : { "Ref" : "LoadBalancerSecurityGroup"  }
      }
    },

    "PublicELBDNSRecordSet" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneId" : { "Fn::FindInMap" : [ "DNSZoneMap", "Staging", "Public"] },
        "Name" : { "Fn::Join" : [ "", [ { "Ref" : "ClientSlug" }, ".aro.staging.app.altvil.com" ] ] },
        "Type" : "CNAME",
        "TTL" : "300",
        "ResourceRecords": [ { "Fn::GetAtt": [ "LoadBalancer", "DNSName" ] } ]
      }
    },

    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : { "Fn::Join" : [ "", [ "S-ARO-", { "Ref" : "EnvSlug" } , " Load Balancers" ] ] },
        "VpcId": { "Ref": "VpcId" },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443"
          }, {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80"
          }
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "", [ "S-ARO-", { "Ref" : "EnvSlug" }, "-LB-SG" ] ] } },
          { "Key" : "Project" , "Value" : { "Ref" : "ProjectTag" } }
        ]
      }
    },

    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      
      "Properties": {
        "SecurityGroups": [{ "Ref": "LoadBalancerSecurityGroup" }],
        "Subnets": [ { "Fn::GetAtt": [ "SharedNetworkInfo", "AppSubnetB" ] },
                     { "Fn::GetAtt": [ "SharedNetworkInfo", "AppSubnetC" ] },
                     { "Fn::GetAtt": [ "SharedNetworkInfo", "AppSubnetD" ] },
                     { "Fn::GetAtt": [ "SharedNetworkInfo", "AppSubnetE" ] } ],
        "Listeners": [  {
          "LoadBalancerPort": "443",
          "Protocol": "HTTPS",
          "InstancePort": "80",
          "InstanceProtocol": "HTTP",
          "SSLCertificateId": { "Ref": "SslCertificate" }
        },
        {
          "LoadBalancerPort": "80",
          "Protocol": "HTTP",
          "InstancePort": "8081",
          "InstanceProtocol": "HTTP"
        } ],
        "HealthCheck": {
          "Target": "HTTP:80/login",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "30",
          "Timeout": "5"
        },
        "Tags" : [
           
        ]
      }
    },

    "DBVPCSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Condition" : "RdsEnabled",
      "Properties" : {
        "GroupDescription" : { "Fn::Join" : [ "", [ "S-ARO-", { "Ref" : "EnvSlug" } , "Database Instances" ] ] },
        "SecurityGroupIngress" : [
          {
            "SourceSecurityGroupId" : { "Ref" : "AppSecurityGroup" },
            "IpProtocol" : "tcp",
            "FromPort" : "5432",
            "ToPort" : "5432" 
          }
        ],
        "VpcId" : { "Ref" : "VpcId" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "", [ "S-ARO-", { "Ref" : "EnvSlug" } ] ] } },
          { "Key" : "Project" , "Value" : { "Ref" : "ProjectTag" } }
        ]
      }
    },

    "PgrDbSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Condition" : "PgrEnabled",
      "Properties" : {
        "GroupDescription" : { "Fn::Join" : [ "", [ "S-ARO-", { "Ref" : "EnvSlug" } , "PGR Database Instances" ] ] },
        "SecurityGroupIngress" : [
          {
            "SourceSecurityGroupId" : { "Ref" : "AppSecurityGroup" },
            "IpProtocol" : "tcp",
            "FromPort" : "5432",
            "ToPort" : "5432" 
          },
          {
            "CidrIp" : "0.0.0.0/0",
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22" 
          }
        ],
        "VpcId" : { "Ref" : "VpcId" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "", [ "S-ARO-", { "Ref" : "EnvSlug" } , "-PGRDB" ] ] } },
          { "Key" : "Project" , "Value" : { "Ref" : "ProjectTag" } }
        ]
      }
    },


    "PgrDbInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Condition" : "PgrEnabled",
      "Properties" : {
        "ImageId" : { "Ref" : "PgrDbImageId" },
        "InstanceType" : { "Ref" : "PgrDbInstanceType" },
        "AvailabilityZone" : "us-east-1b",
        "KeyName" : { "Ref" : "SshKeyName" },
        "SecurityGroupIds" : [ { "Ref" : "PgrDbSecurityGroup" } ],
        "SubnetId" : { "Fn::GetAtt" : [ "SharedNetworkInfo", "AppSubnetB" ] },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "", [ "S-ARO-", { "Ref" : "EnvSlug" }, "-DB" ] ] } },
          { "Key" : "Project" , "Value" : { "Ref" : "ProjectTag" } }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             
             "sudo -u postgres psql -d ", { "Ref" : "DBName" }, " -c \"ALTER ROLE aro PASSWORD '", { "Ref" : "DBPassword" }, "';\"\n",
             "sudo -u postgres psql -d ", { "Ref" : "DBName" }, " -c \"ALTER ROLE aro SUPERUSER;\"\n",
             "sudo -u postgres psql -d ", { "Ref" : "DBName" }, " -c \"CREATE EXTENSION postgis;\"\n",
             "sudo -u postgres psql -d ", { "Ref" : "DBName" }, " -c \"CREATE EXTENSION fuzzystrmatch;\"\n",
             "sudo -u postgres psql -d ", { "Ref" : "DBName" }, " -c \"CREATE EXTENSION pgrouting;\"\n",

             "echo \"This sorta worked\" > firstrun.txt\n"
        ]]}}
      }
    },

    "DB" : {
      "Type" : "AWS::RDS::DBInstance",
      "Condition" : "RdsEnabled",
      "Properties" : {
        "DBName" : { "Ref" : "DBName" },
        "AllocatedStorage" : { "Ref" : "DBVolumeSize" },
        "DBInstanceClass" : { "Ref" : "DBInstanceType" },
        "DBInstanceIdentifier" : { "Fn::Join" : [ "", [ "S-ARO-", { "Ref" : "EnvSlug" } ] ] },
        "Engine" : "postgres",
        "MultiAZ" : "false",
        "AvailabilityZone" : { "Ref" : "PrimaryAvailabilityZone" },
        "MasterUsername" : { "Ref" : "DBUsername" } ,
        "MasterUserPassword" : { "Ref" : "DBPassword" },
        "DBSubnetGroupName" : { "Fn::GetAtt" : ["SharedNetworkInfo", "DBSubnetGroup" ] },
        "VPCSecurityGroups" : [ { "Ref" : "DBVPCSecurityGroup" } ],
        "BackupRetentionPeriod" : "7",
        "StorageType" : "gp2",
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "", [ "S-ARO-", { "Ref" : "EnvSlug" } ] ] } },
          { "Key" : "Project" , "Value" : { "Ref" : "ProjectTag" } }
        ]
      }
        },

    "DBExternalDNSRecordSet" : {
      "Type" : "AWS::Route53::RecordSet",
      "Condition" : "RdsEnabled",
      "Properties" : {
        "HostedZoneId" : { "Fn::FindInMap" : [ "DNSZoneMap", "Staging", "Public" ] },
        "Name" : { "Fn::Join" : [ "", [ "db.", { "Ref" : "ClientSlug" }, ".aro.staging.app.altvil.com" ] ] },
        "Type" : "CNAME",
        "TTL" : "300",
         "ResourceRecords":[  
          {  
            "Fn::GetAtt":[  
              "DB",
              "Endpoint.Address"
            ]
          }
        ]
      }
    },

    "DBInternalDNSRecordSet" : {
      "Type" : "AWS::Route53::RecordSet",
      "Condition" : "RdsEnabled",
      "Properties" : {
        "HostedZoneId" : { "Fn::FindInMap" : [ "DNSZoneMap", "Staging", "Private" ] },
        "Name" : { "Fn::Join" : [ "", [ "db.", { "Ref" : "ClientSlug" }, ".aro.staging.app.altvil.com" ] ] },
        "Type" : "CNAME",
        "TTL" : "300",
         "ResourceRecords":[  
          {  
            "Fn::GetAtt":[  
              "DB",
              "Endpoint.Address"
            ]
          }
        ]
      }
    },

    "PgrDbServerElasticIP" : {
      "Type" : "AWS::EC2::EIP",
      "Condition" : "PgrEnabled",
      "Properties" : {
          "Domain" : "vpc",
          "InstanceId" : { "Ref" : "PgrDbInstance" }
      }
    },

    "PgrDbExternalDnsRecrordSet" : {
      "Type" : "AWS::Route53::RecordSet",
      "Condition" : "PgrEnabled",
      "Properties" : {
        "HostedZoneId" : { "Fn::FindInMap" : [ "DNSZoneMap", "Staging", "Public" ] },
        "Name" : { "Fn::Join" : [ "", [ "db.", { "Ref" : "ClientSlug" }, ".aro.staging.app.altvil.com" ] ] },
        "Type" : "A",
        "TTL" : "300",
         "ResourceRecords":[  
          {  
            "Ref" : "PgrDbServerElasticIP"
          }
        ]
      }
    },

    "PgrDbInternalDnsRecordSet" : {
      "Type" : "AWS::Route53::RecordSet",
      "Condition" : "PgrEnabled",
      "Properties" : {
        "HostedZoneId" : { "Fn::FindInMap" : [ "DNSZoneMap", "Staging", "Private" ] },
        "Name" : { "Fn::Join" : [ "", [ "db.", { "Ref" : "ClientSlug" }, ".aro.staging.app.altvil.com" ] ] },
        "Type" : "A",
        "TTL" : "300",
         "ResourceRecords":[  
          {  
            "Fn::GetAtt":[  
              "PgrDbInstance",
              "PrivateIp"
            ]
          }
        ]
      }
    },

    "StackRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [ { 
              "Effect" : "Allow",
              "Principal" : {
                "Service" : [ "ec2.amazonaws.com" ]
              },
              "Action" : [ "sts:AssumeRole" ]
          } ]
        },
        "Path" : "/"
      }
    },

    "StackS3Policy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [ { "Ref": "StackRole" } ],
        "PolicyName": { "Fn::Join": [ "", [ "S-ARO-", { "Ref": "EnvSlug" }, "-S3-POLICY" ] ] },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Action": [
              "s3:DeleteObject",
              "s3:GetObject",
              "s3:PutObject"
            ],
            "Resource": [ "arn:aws:s3:::public.aro/*" ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket"
            ],
            "Resource": [ "arn:aws:s3:::public.aro" ]
          }
           ]
        }
      }
    },

    "StackCloudWatchLogsPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [ { "Ref": "StackRole" } ],
        "PolicyName": { "Fn::Join": [ "", [ "S-ARO-", { "Ref": "EnvSlug" }, "-CWLOGS-POLICY" ] ] },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams"
            ],
            "Resource": [ "arn:aws:logs:*:*:*" ]
          } ]
        }
      }
    },

    "StackSendEmailPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [ { "Ref": "StackRole" } ],
        "PolicyName": { "Fn::Join": [ "", [ "S-ARO-", { "Ref": "EnvSlug" }, "-SEND-EMAIL-POLICY" ] ] },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Action": [
              "ses:SendEmail",
              "ses:SendRawEmail"
            ],
            "Resource": [ "*" ]
          } ]
        }
      }
    },

    "StackInstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
          "Path" : "/",
          "Roles" : [ { "Ref" : "StackRole" } ]
      }
    },

    "Stack" : {
      "Type" : "AWS::OpsWorks::Stack",
      "Properties" : {
        "Name" : { "Fn::Join" : [ "", [ "S-ARO-", { "Ref" : "EnvSlug" } ] ] },
        "VpcId" : { "Ref" : "VpcId" },
        "DefaultSubnetId" : { "Fn::GetAtt" : [ "SharedNetworkInfo", "AppSubnetD" ] },
        "DefaultOs" : "Ubuntu 14.04 LTS",
        "DefaultRootDeviceType" : "ebs",
        "ServiceRoleArn" : "arn:aws:iam::976168524097:role/aws-opsworks-service-role",
        "DefaultInstanceProfileArn" : { "Fn::GetAtt" : [ "StackInstanceProfile", "Arn" ] },
        "DefaultSshKeyName" : { "Ref" : "SshKeyName" },
        "HostnameTheme": "Baked_Goods",

        "ConfigurationManager" : {
          "Name" : "Chef",
          "Version" : "11.10"
        },
        "ChefConfiguration" : {
          "BerkshelfVersion" : "3.2.0",
          "ManageBerkshelf" : true
        },
        "UseCustomCookbooks" : true,
        "CustomCookbooksSource" : {
          "Type" : "git",
          "Url" : "git@octocat.altvil.com:AIT/ARO-Config",
          "Revision" : { "Ref" : "ConfigRepoBranch" },
          "SshKey" : { "Ref" : "GithubSshKey" }
        },
        "UseOpsworksSecurityGroups" : false,
        "CustomJson" : 
          {
            "ARO":{ "environment": "staging" },
            "av-custom" : { "project_code" : { "Ref" : "ProjectTag" } }
          }
      }
    },

    "AppLayer" : {
      "Type" : "AWS::OpsWorks::Layer",
      "Properties" : {
        "StackId": { "Ref" : "Stack" },
        "Name" : "App Server Layer",
        "Shortname" : "app",
        "Type" : "custom",
        "EnableAutoHealing" : true,
        "AutoAssignElasticIps" : false,
        "AutoAssignPublicIps" : true,
        "CustomSecurityGroupIds" : [ { "Ref" : "AppSecurityGroup" } ],
        "InstallUpdatesOnBoot" : true,
        "CustomRecipes" : {
          "Setup" : [ "nginx", "aro::default", "aro::python-dependencies", "aro::aws", "aro::cwlogs" ],
          "Deploy" : [ "deploy::node" ]
        },
        "VolumeConfigurations" : [ {
          "MountPoint" : "/var/lib/docker",
          "Size" : "40",
          "VolumeType" : "gp2",
          "NumberOfDisks" : 1
        } ]
      }
    },
    "LoadBalancerLink": {
      "Type": "AWS::OpsWorks::ElasticLoadBalancerAttachment",
      "Properties": {
        "ElasticLoadBalancerName": { "Ref": "LoadBalancer" },
        "LayerId": { "Ref": "AppLayer" }
      }
    },

    

  },

  "Outputs" : {
    "Stack" : {
      "Value" : { "Ref" : "Stack" }
    },
    "Layer": {
      "Value" : { "Ref" : "AppLayer" }
    },
    "RDSInstance" : {
      "Value" : { "Ref" : "DB" },
      "Condition": "RdsEnabled"
    },
    
  }
}
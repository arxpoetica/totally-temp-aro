{{!-- Initial comments section - This instructs the user to not modify these files manually --}}
// *****************************************************************************
// AUTOGENERATED FILE - This file is autogenerated using metadata provided by
// aro-service. Do not make changes to this file or check it in to source
// control. Details on how to auto-generate these classes is given in README.md
// *****************************************************************************

// TODO: this whole AroFeatureFactory system needs to be replaced

{{!-- Import dependent classes that are required by the current class --}}
{{importDependentClasses classDef.properties}}
{{#each classDef.properties}}
{{#if (shouldIncludePropertyType this ../classDef)}}
import {{classNameExtractor this.items}} from './{{classNameExtractor this.items}}'
{{/if}}
{{/each}}
import AroFeatureFactory from './AroFeatureFactory'

{{!-- The class definition for the current class --}}
class {{classNameExtractor this.classDef}} {

  {{!-- Define a constructor that will create default values for all the member variables --}}
  // Constructor
  constructor() {
    {{#each classDef.properties}}
    {{memberDeclaration @key this ../display}}  {{!-- Example output: "this.name = ''" --}}
    {{/each}}
  }

  {{!-- A static function that will take a POJO object and return an object with the current classes type --}}
  // Returns a {{classNameExtractor this.classDef}} object from it's JSON representation
  static fromJSONObject(jsonObject) {
    var newObj = new {{classNameExtractor this.classDef}}()

    if (!jsonObject) {
      console.warn('Undefined object when creating {{classNameExtractor this.classDef}}. Returning default object')
      return newObj
    }

    // Set all the properties of newObj from the POJO. For object types, create a new object with data from the POJO.
    {{#each classDef.properties}}
    {{#if (isArray this)}}
    newObj['{{@key}}'] = []
    if (jsonObject['{{@key}}']) {
      jsonObject['{{@key}}'].forEach((item) => newObj['{{@key}}'].push({{classNameExtractor this.items}}.fromJSONObject(item))) // array
    }
    {{else if (isPrimitive this.type)}}
    if (jsonObject['{{@key}}']) newObj.{{@key}} = jsonObject['{{@key}}'] //primitive
    {{else if (isMapObject this)}}
    if (jsonObject['{{@key}}']) newObj.{{@key}} = jsonObject['{{@key}}'] //map
    {{else if (isAnyObject this)}}
    if (jsonObject['{{@key}}']) newObj.{{@key}} = jsonObject['{{@key}}'] //any
    {{else}}
    newObj.{{@key}} = {{classNameExtractor this}}.fromJSONObject(jsonObject['{{@key}}']) // else
    {{/if}}
    {{/each}}

    return newObj
  }

  static buildDisplayProperties() {
    this.displayProperties = {{{toJSONByOrder display propOrder}}}
  }

  {{!-- A static function that will return details on how to display properties of this class --}}
  // Return details on how to display properties of this class
  getDisplayProperties() {
    if (!{{classNameExtractor this.classDef}}.displayProperties) {
      {{classNameExtractor this.classDef}}.buildDisplayProperties()
    }
    return {{classNameExtractor this.classDef}}.displayProperties
  }

  static buildFullDisplayProperties() {
    //displayOrder
    //properties = {} // used only for displayType: COLLECTION
    //itemSchema = null // used only for displayType: LIST
    this.fullDisplayProperties = {{{buildFullDisplayProperties display propOrder}}}

    
  }

  static getFullDisplayProperties() {
    if (!this.fullDisplayProperties) {
      this.buildFullDisplayProperties()
    }
    return this.fullDisplayProperties
  }

  getFullDisplayProperties() {
    return {{classNameExtractor this.classDef}}.getFullDisplayProperties()
  }

}

AroFeatureFactory.registerAroFeature('{{classUrnExtractor this.classDef}}', {{classNameExtractor this.classDef}})

export default {{classNameExtractor this.classDef}}

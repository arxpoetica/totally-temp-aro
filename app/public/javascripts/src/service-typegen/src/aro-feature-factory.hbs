{{!-- Initial comments section - This instructs the user to not modify these files manually --}}
// *****************************************************************************
// AUTOGENERATED FILE - This file is autogenerated using metadata provided by
// aro-service. Do not make changes to this file or check it in to source
// control. Details on how to auto-generate these classes is given in README.md
// *****************************************************************************

{{!-- Define the factory class--}}
class AroFeatureFactory {

  static initializeDataTypeToUrn() {
    this.dataTypeToUrn = {
      {{#each this}}
      {{#if @last}}
      '{{this.dataType}}': '{{this.schemaReference}}' {{!-- No comma on the last element --}}
      {{else}}
      '{{this.dataType}}': '{{this.schemaReference}}',
      {{/if}}
      {{/each}}
    }
  }
  static registerAroFeature(urn, classPrototype) {
    this.urnToClass = this.urnToClass || {}
    this.urnToClass[urn] = classPrototype
  }

  static createObject(jsonObject) {
    if (!jsonObject.dataType) {
      console.error('Must have a dataType to create an object using AroFeatureFactory')
      return null
    }
    if (!this.dataTypeToUrn) {
      this.initializeDataTypeToUrn()
    }
    const urn = this.dataTypeToUrn[jsonObject.dataType]
    if (!urn) {
      console.error(`Unable to find dataType to URN mapping for dataType ${jsonObject.dataType}`)
      return null
    }
    var classPrototype = this.urnToClass[urn]
    if (!classPrototype) {
      console.error(`Class prototype not found for urn ${urn}`)
      return null
    }
    // Finally, we can create our object
    return classPrototype.fromJSONObject(jsonObject)
  }
  
  static initializeUrnToEnumSet() {
    this.urnToEnumSet = {}
  }
  
  static getEnumSetByURN(urn){
    if (!this.urnToEnumSet) {
      this.initializeUrnToEnumSet()
    }
    return new Promise((resolve, reject) => {
      console.log(urn)
      
      if (!this.urnToEnumSet[urn]) {
        // call API
        let request = new XMLHttpRequest()
        request.onreadystatechange = function(){
          if (this.readyState === 4) {
            if (this.status === 200){
              AroFeatureFactory.urnToEnumSet[urn] = JSON.parse(this.responseText)
              resolve(AroFeatureFactory.urnToEnumSet[urn])
            }else{
              reject(this.responseText)
            }
          }
        }
        request.open("GET", urn, true);
        request.send();
      }else{
        resolve(this.urnToEnumSet[urn])
      }
    })
  }
  
  // we currently only handel object paths that are siblings or at the root
  static getEnumSet(feature, parent, urn){
    var pairs = urn.split('}')
    if (pairs.length == 1) return this.getEnumSetByURN(urn)
    
    var evaluateVal = (name) => {
      if ('undefined' == typeof name) return ""
      if ('/' == name.charAt(0)){
        return feature[ name.substring(1) ]
      }else{
        return parent[name]
      }
    }
    
    var builtURN = ""
    for (let pairI=0; pairI<pairs.length; pairI++){
      let pair = pairs[pairI].split('${')
      console.log(pair[1])
      builtURN += pair[0] + evaluateVal(pair[1])
    }
    return this.getEnumSetByURN(builtURN)
  }
  
}

export default AroFeatureFactory
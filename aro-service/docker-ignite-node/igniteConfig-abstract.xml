<beans xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns="http://www.springframework.org/schema/beans"
    xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/data/jpa
       http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd">

    
<!-- ******************** -->
<!-- IGNITE CONFIGURATIONS -->
<!-- ******************** -->
    
    <bean abstract="true" id="ignite-abstract.cfg" class="org.apache.ignite.configuration.IgniteConfiguration">

		<!-- Nodes which share gridName will cluster, so long as they can discover each other -->
        <property name="gridName" value="aroIgniteGrid"/>

        <!-- Set to true to enable distributed class loading for examples, default is false. -->
        <property name="peerClassLoadingEnabled" value="true"/>

        <!-- Explicitly configure TCP discovery SPI to provide list of initial nodes. -->
        <property name="discoverySpi">
            <bean class="org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi">
                <property name="ipFinder">
                    <bean class="org.apache.ignite.spi.discovery.tcp.ipfinder.multicast.TcpDiscoveryMulticastIpFinder">
						<!-- For security in production environment, consider populate 'addresses' property with list of actual host IP address. -->
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

<!-- ******************** -->
<!-- CACHE CONFIGURATIONS -->
<!-- ******************** -->

	<bean abstract="true" id="basicCache.cfg" class="org.apache.ignite.configuration.CacheConfiguration">
    	<!-- Set cache mode. -->
        <property name="cacheMode" value="PARTITIONED"/>
        <!-- Set number of backups to 0  WARNING: REEVALUATE FOR PRODUCTION!-->
        <property name="backups" value="0"/>
        <!-- Set initial cache capacity to ~ 10M. Avoids costly cache resizes. -->
        <property name="startSize" value="#{10 * 1024 * 1024}"/> 
        <!-- Set memory mode (default is ONHEAP_TIERED)
       	    ONHEAP_TIERED: entries, heap -> offheap (-> swap)
       	 	OFFHEAP_TIERED: entries, offheap (-> swap)
       	 	OFFHEAP_VALUES: keys on heap, values offheap (unsure if this supports swap)
       	 	Where swap supported and enabled, offHeapMaxMemory limit causes moves
       	 	from offheap to swap via implicit LRU.  I.e., the "evictionPolicy" property
       	 	is only relevant for heap-to-off-heap evictions (ONHEAP_TIERED).
       	-->
        <property name="memoryMode" value="ONHEAP_TIERED"/>
        <!-- Enable off-heap storage (for unlimited size, use 0). -->
        <property name="offHeapMaxMemory" value="#{500 * 1024 * 1024}"/> 
        <!-- Should cache swap to disk as final tier? -->
        <property name="swapEnabled" value="false"/> 
        <!-- Eviction for constrained memory -->
 		<property name="evictionPolicy">
		    <!-- LRU eviction policy. -->
		    <bean class="org.apache.ignite.cache.eviction.lru.LruEvictionPolicy">
		        <!-- Set the maximum cache size to 1 million (default is 100,000). 
		        	With ONHEAP_TIERED this evicts full entries heap to off-heap. 
		         	With OFFHEAP_TIERED the evict is full entries off-heap 
		         	 	             (to swap if available, else deletion). -->
		        <property name="maxSize" value="1000000"/>
		    </bean>
		</property>
   </bean>



<!-- ******************** -->
<!-- IDE-ONLY CONFIGURATIONS -->
<!-- ******************** -->

    <bean abstract="true" id="ignite-abstract-IDE.cfg" parent="ignite-abstract.cfg">

		<!-- Override the default grid name so we have a test-only grid, 
			 and so the grid consoles are clear as to which grid 
			 a node is participating in -->
        <property name="gridName" value="aroIgniteGrid-IDE"/>
        
        <property name="localHost" value="127.0.0.1"/>

        <!-- Explicitly configure TCP discovery SPI to provide list of initial nodes. -->
        <property name="discoverySpi">
            <bean class="org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi">
                <property name="ipFinder">
                    <bean class="org.apache.ignite.spi.discovery.tcp.ipfinder.multicast.TcpDiscoveryMulticastIpFinder">
                        <property name="addresses">
                            <list>
                                <value>127.0.0.1:47500..47509</value>
                            </list>
                        </property>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>


</beans>
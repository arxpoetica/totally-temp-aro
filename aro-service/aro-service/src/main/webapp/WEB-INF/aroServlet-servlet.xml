<beans xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns="http://www.springframework.org/schema/beans"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task
		http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/data/jpa
		http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/websocket
		http://www.springframework.org/schema/websocket/spring-websocket.xsd">

	<!-- The property placeholder in aroServices cannot be inherited so repeat it here. -->
	<context:property-placeholder location="classpath*:/aroConfig.properties,classpath*:/aroServlet.properties" />

	<bean id="contentManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="favorPathExtension" value="true" />
		<property name="ignoreAcceptHeader" value="true" />
		<property name="defaultContentType" value="application/json" />
		<property name="useJaf" value="false" />
		<property name="favorParameter" value="true" />
		<property name="parameterName" value="mediaType" />
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="html" value="text/html" />
				<entry key="xml" value="application/xml" />
				<entry key="text" value="text/plain" />
			</map>
		</property>
	</bean>

	<mvc:annotation-driven
		content-negotiation-manager="contentManager">
		<mvc:message-converters>
			<ref bean="jsonMessageConverter" />
		</mvc:message-converters>
	</mvc:annotation-driven>

   <websocket:message-broker application-destination-prefix="/app">
        <websocket:stomp-endpoint path="/stomp">
        	<websocket:handshake-handler ref="wsCustomAuthenticationHandshake"/>
            <websocket:sockjs/>
        </websocket:stomp-endpoint>
        <websocket:simple-broker prefix="/topic, /queue"/>
    </websocket:message-broker>

	<context:component-scan base-package="com.altvil"/>
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="jsonMessageConverter" />
			</list>
		</property>
	</bean>

	<bean id="jsonMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="objectMapper">
			<bean class="com.altvil.netop.json.AroServiceObjectMapper" />
		</property>
	</bean>

	<bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="defaultContentType" value="application/json" />
	</bean>

	<mvc:resources mapping="swagger-ui.html" location="classpath:/META-INF/resources/" />
	
	<mvc:resources mapping="/webjars/**"
		location="classpath:/META-INF/resources/webjars/" />

<!-- ***************************** -->
<!-- IGNITE GRID CONFIGURATIONS    -->
<!-- ***************************** -->
		
    <import resource="classpath:/META-INF/igniteConfig-abstract.xml"/>
    
	<!-- NOTE the IgniteSpringBean bean id is used for Autowiring, while 
		 the configuration's gridName is the actual Ignite grid being used.  
		 This abstraction provides easy reconfiguration when using multiple grids. 
		 For easy reconfiguration, autowire to the alias (below) instead of actual bean id. -->
		 
<!-- 	<bean id="singleIgniteGrid" autowire="byName" class="org.apache.ignite.IgniteSpringBean">
		<property name="configuration">
	        <bean parent="ignite-abstract.cfg">  <!- - Use bean parent "ignite-abstract-IDE.cfg" when running in IDE - ->
	        	<property name="clientMode" value="${igniteClientMode}"/>
	        	        
		        <property name="cacheConfiguration">
		        	<list>
						<bean parent="basicCache.cfg">
							<property name="name" value="${CACHE_LOCATION_DEMANDS_BY_PLAN_ID_AND_YEAR}"/>
							<property name="statisticsEnabled" value="false"/>
						</bean>
						<bean parent="basicCache.cfg">
							<property name="name" value="${CACHE_ROAD_LOCATIONS_BY_PLAN_ID}"/>
							<property name="statisticsEnabled" value="false"/>
						</bean>
						<bean parent="basicCache.cfg">
							<property name="name" value="${CACHE_FIBER_SOURCES_BY_PLAN_ID}"/>
							<property name="statisticsEnabled" value="false"/>
						</bean>
						<bean parent="basicCache.cfg">
							<property name="name" value="${CACHE_ROAD_EDGES_BY_PLAN_ID}"/>
							<property name="statisticsEnabled" value="false"/>
						</bean>
					</list>
		    	</property>
	        	
	        </bean>
	    </property>
 	</bean>
 	
 	<!- - Alias the defined grids so compute/cache/services can be 
 		 moved to different clusters without code changes.  When autowiring,
 		 use method injection based on these aliases only. - ->
	<alias name="singleIgniteGrid" alias="networkServiceIgniteGrid"/>
	<alias name="singleIgniteGrid" alias="networkPlanningServiceIgniteGrid"/>
	<alias name="singleIgniteGrid" alias="recalcEndpointIgniteGrid"/> -->
 	
</beans>
machine:
  services:
    - docker
  environment:
    IMAGE_NAME: docker-registry.cloud.altvil.com/avco/cmo-app
    IMAGE_TAG: ${IMAGE_NAME}:${CIRCLE_BUILD_NUM}
    LATEST_TAG: ${IMAGE_NAME}:latest

checkout:
  post:
    - git submodule sync
    - git submodule update --init

dependencies:
  pre:
    - pip install numpy==1.8.2
    - pip install -r requirements.txt
    - aws s3 cp s3://pip.altvil.com/packages/trustack-latest.tar.gz .
    - pip install trustack-latest.tar.gz
  cache_directories:
    - "~/docker-image"
  post:
    - docker info
    # these load/save commands work around inability to cache copy-on-write layers properly
    # by caching the image in a tarball
    - if [[ -e ~/docker-image/image.tar ]]; then docker load --input ~/docker-image/image.tar; fi
    - docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS https://docker-registry.cloud.altvil.com/
    - docker/build.sh
    - docker build -t ${IMAGE_TAG} ./target
    - docker tag ${IMAGE_TAG} ${LATEST_TAG}
    - mkdir -p ~/docker-image; docker save ${IMAGE_TAG} > ~/docker-image/image.tar

database:
  override:
    - createdb -U ubuntu cmo
    - CMO_APP_ENVIRONMENT=TEST CMO_APP_DB_HOST=localhost CMO_APP_DB_USER=ubuntu CMO_APP_DB_PASS= CMO_APP_AGGRESSIVELY_DESTROY_DATABASE=1 bash bootstrap/drop_db.sh
    
test:
  override:
    - PYTHONPATH=. nosetests --no-path-adjustment --where . test/unit
    - karma start --single-run
    # disable functional tests until they actually work
    # - CMO_TEST=1 python testrunner.py

deployment:
  qa:
    branch: [master]
    owner: MROI
    commands:
      - docker push ${IMAGE_TAG}
      - docker push ${LATEST_TAG}
      - printf -- "${OPSWORKS_SSH_KEY}" > opsworks_ssh_key
      - chmod 400 opsworks_ssh_key
      - PYTHONPATH=. CMO_APP_OPSWORKS_SSH_KEY=$(cat opsworks_ssh_key) bash docker/stack_ops.sh update qa
      - rm -f opsworks_ssh_key

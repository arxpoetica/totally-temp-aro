general:
  branches:
    only:
      - master


machine:
  services:
    - docker
  environment:
    IMAGE_NAME: avco/aro-app
    IMAGE_TAG: ${IMAGE_NAME}:${CIRCLE_BUILD_NUM}
    LATEST_TAG: ${IMAGE_NAME}:latest
    ECR_IMAGE_NAME: 976168524097.dkr.ecr.us-east-1.amazonaws.com/aro/aro-app
    ECR_IMAGE_TAG: ${ECR_IMAGE_NAME}:${CIRCLE_BUILD_NUM}
    ECR_LATEST_TAG: ${ECR_IMAGE_NAME}:latest

    ARO_CLIENT: aro
  node:
    version: 6.11.4

checkout:
  post:

dependencies:
  override:
    - npm install -g mocha
    - pip install boto3
  cache_directories:
    - "~/docker-image"
  post:
    - docker info
    # these load/save commands work around inability to cache copy-on-write layers properly
    # by caching the image in a tarball
    # - if [[ -e ~/docker-image/image.tar ]]; then docker load --input ~/docker-image/image.tar; fi
    - eval $(aws ecr get-login --region us-east-1)
    - docker login --username $DOCKERHUB_USER --password $DOCKERHUB_PASS --email completely@outdated.com
    - docker/build.sh
    - docker build -t ${IMAGE_TAG} ./target
    - docker tag ${IMAGE_TAG} ${LATEST_TAG}
    - docker tag ${IMAGE_TAG} ${ECR_IMAGE_TAG}
    - docker tag ${IMAGE_TAG} ${ECR_LATEST_TAG}
    # - mkdir -p ~/docker-image; docker save ${IMAGE_TAG} > ~/docker-image/image.tar

database:
  override:
      - echo "Skipping database section" #needed to disable erroneous circleci inferences
    
test:
  override:
    # - (cd app && npm test)
    - /bin/true

deployment:
  qa:
    branch: [master]
    owner: AIT
    commands:
      - docker push ${IMAGE_TAG}
      - docker push ${LATEST_TAG}
      - docker push ${ECR_IMAGE_TAG}
      - docker push ${ECR_LATEST_TAG}
      - python docker/publish_version.py ait-master app $CIRCLE_BUILD_NUM
      - printf -- "${OPSWORKS_SSH_KEY}" > opsworks_ssh_key
      - chmod 400 opsworks_ssh_key
      - PYTHONPATH=. ARO_APP_OPSWORKS_SSH_KEY=$(cat opsworks_ssh_key) docker/stack_ops.sh update qa
      - rm -f opsworks_ssh_key
  dockerhub:
    branch: [unify]
    owner: AIT
    commands:
      # - docker push ${IMAGE_TAG}
      # - docker push ${LATEST_TAG}
      - docker push ${ECR_IMAGE_TAG}
      - docker push ${ECR_LATEST_TAG}
      - python docker/publish_version.py ait-master app $CIRCLE_BUILD_NUM
      - printf -- "${OPSWORKS_SSH_KEY}" > opsworks_ssh_key
      - chmod 400 opsworks_ssh_key
      - PYTHONPATH=. ARO_APP_OPSWORKS_SSH_KEY=$(cat opsworks_ssh_key) docker/stack_ops.sh update qa
      - rm -f opsworks_ssh_key
  
